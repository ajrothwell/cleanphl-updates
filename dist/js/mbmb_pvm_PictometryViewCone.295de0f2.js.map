{"version":3,"sources":["webpack:///./node_modules/core-js/library/modules/es6.parse-float.js","webpack:///./node_modules/core-js/library/modules/_parse-float.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/parse-float.js","webpack:///./node_modules/core-js/library/fn/parse-float.js","webpack:///./node_modules/@philly/vue-mapping/src/pictometry/ViewCone.vue","webpack:///node_modules/@philly/vue-mapping/src/pictometry/ViewCone.vue","webpack:///./node_modules/@philly/vue-mapping/src/pictometry/ViewCone.vue?cf87"],"names":["$export","__webpack_require__","$parseFloat","G","F","parseFloat","$trim","trim","module","exports","Infinity","str","string","String","result","charAt","render","staticRenderFns","ViewConevue_type_script_lang_js_","name","props","h","computed","ipa","this","$store","state","pictometry","zoom","radius","zoomMap","17","18","19","20","21","22","23","24","mounted","getViewConeLatLon","beforeDestroy","removeShapes","shapeIds","watch","nextRadius","rotationAngle","latlng","methods","camLat","camLon","ER","camR","Angle1","Angle2","parse_float_default","hFov","Math","PI","dnLP","cos","deLP","sin","dnRP","deRP","dLatLP","dLonLP","dLatRP","dLonRP","camRightLat","camRightLon","camLeftLat","camLeftLon","coordinates","y","x","z","placeViewCone","coords","self","viewTriangle","type","SHAPE_TYPE","POLYGON","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","altitudeMode","ALTITUDE_MODE","RELATIVE_TO_GROUND","addShapes","i","length","success","alert","error","push","shapeId","slice","pictometry_ViewConevue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__"],"mappings":"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","file":"js/mbmb_pvm_PictometryViewCone.295de0f2.js","sourcesContent":["var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n","module.exports = require(\"core-js/library/fn/parse-float\");","require('../modules/es6.parse-float');\nmodule.exports = require('../modules/_core').parseFloat;\n","var render, staticRenderFns\nimport script from \"./ViewCone.vue?vue&type=script&lang=js&\"\nexport * from \"./ViewCone.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  export default {\n    name: 'PictometryViewCone',\n    props: [\n      'latlng',\n      'rotationAngle',\n      'hFov'\n    ],\n    render(h) {\n      return;\n    },\n    computed: {\n      ipa() {\n        return this.$store.state.pictometry.ipa;\n      },\n      zoom() {\n        return this.$store.state.pictometry.zoom;\n      },\n      radius() {\n        const zoomMap = {\n          '17': 75,\n          '18': 50,\n          '19': 25,\n          '20': 15,\n          '21': 10,\n          '22': 10,\n          '23': 10,\n          '24': 10\n        }\n        return zoomMap[this.zoom]\n        // return zoomMap[this.$store.state.map.zoom]\n      }\n    },\n    mounted() {\n      this.getViewConeLatLon();\n    },\n    beforeDestroy() {\n      this.ipa.removeShapes(this.$store.state.pictometry.shapeIds);\n    },\n    watch: {\n      radius(nextRadius) {\n        // this.ipa.getMetaData(function(e) {\n        //   console.log(e);\n        // });\n        // this.ipa.getZoomRange(function(e) {\n        //   console.log(e);\n        // })\n        // console.log('radius:', nextRadius);\n        this.getViewConeLatLon();\n      },\n      rotationAngle() {\n        this.ipa.removeShapes(this.$store.state.pictometry.shapeIds);\n        this.getViewConeLatLon();\n      },\n      latlng() {\n        this.ipa.removeShapes(this.$store.state.pictometry.shapeIds);\n        this.getViewConeLatLon();\n      },\n    },\n    methods: {\n      getViewConeLatLon() {\n        // console.log('getViewConeLatLon is running');\n        const camLat = this.latlng[0];\n        const camLon = this.latlng[1];\n        // Earth's radius\n        const ER=6378137;\n        // viewcone radius, for scaling its size\n        // const camR = 10;\n        const camR = this.radius;\n        // Angle1 - camera angle off of N, Angle2 - fov angle\n        const Angle1 = this.rotationAngle;\n        const Angle2 = parseFloat(this.hFov) * 180/Math.PI;\n\n        const dnLP = Math.cos((Angle1+Angle2/2) * Math.PI/180)*camR;\n        const deLP = Math.sin((Angle1+Angle2/2) * Math.PI/180)*camR;\n        const dnRP = Math.cos((Angle1-Angle2/2) * Math.PI/180)*camR;\n        const deRP = Math.sin((Angle1-Angle2/2) * Math.PI/180)*camR;\n        //Coordinate offsets in radians\n        const dLatLP = dnLP/ER;\n        const dLonLP = deLP/(ER*Math.cos(Math.PI*camLat/180));\n        const dLatRP = dnRP/ER;\n        const dLonRP = deRP/(ER*Math.cos(Math.PI*camLat/180));\n        //OffsetPosition\n        const camRightLat = camLat + dLatLP * 180/Math.PI;\n        const camRightLon = camLon + dLonLP * 180/Math.PI;\n        const camLeftLat = camLat + dLatRP * 180/Math.PI;\n        const camLeftLon = camLon + dLonRP * 180/Math.PI;\n\n        const coordinates = [ {y : camLat, x : camLon, z: 0.0}, {y : camRightLat, x : camRightLon, z: 0.0}, {y : camLeftLat, x : camLeftLon, z: 0.0} ]\n        this.placeViewCone(coordinates)\n      },\n\n      placeViewCone: function(coords){\n        // console.log('placeViewCone is running');\n        const self = this;\n        const viewTriangle = {\n          type: this.ipa.SHAPE_TYPE.POLYGON,\n          coordinates: coords,\n          // coordinates : [ {y : app.state.stViewY, x : app.state.stViewX, z: 0.0}, {y : app.state.viewCone.camRightLat, x : app.state.viewCone.camRightLon, z: 0.0}, {y : app.state.viewCone.camLeftLat, x : app.state.viewCone.camLeftLon, z: 0.0} ],\n          strokeColor: \"#00a0ee\",\n          strokeOpacity: 0.75,\n          strokeWeight: 2,\n          fillColor: \"#00a0ee\",\n          fillOpacity: 0.25,\n          altitudeMode: this.ipa.ALTITUDE_MODE.RELATIVE_TO_GROUND\n        };\n        this.ipa.addShapes([viewTriangle], function(result) {\n          for ( var i = 0; i < result.length; i++) {\n            if ( result[i].success === 'false' ) {\n              alert(result[i].error);\n            } else {\n              const shapeIds = self.$store.state.pictometry.shapeIds;\n              // console.log('shapeIds:', shapeIds);\n              // console.log('current shapeId:', result[i].shapeId);\n              shapeIds.push(result[i].shapeId);\n              const test = shapeIds.slice(0, -1)\n              // console.log('slice', test);\n              self.ipa.removeShapes(shapeIds.slice(0, -1));\n            }\n          }\n        });\n      },\n    }\n  };\n</script>\n","import mod from \"-!../../../../cache-loader/dist/cjs.js??ref--12-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../vue-loader/lib/index.js??vue-loader-options!./ViewCone.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../cache-loader/dist/cjs.js??ref--12-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../vue-loader/lib/index.js??vue-loader-options!./ViewCone.vue?vue&type=script&lang=js&\""],"sourceRoot":""}